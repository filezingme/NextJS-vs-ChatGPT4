🔴 Let’s Build an AI Weather App with ChatGPT-4 (Next.js 13.3, React, Tremor 2.0, StepZen, GraphQL)	
	- Learn at: 
		> https://www.youtube.com/watch?v=DS5TZCn-pk8
		
	- Upgrade your coding skills by joining the world’s BEST developer community & course “Zero to Full Stack Hero”: 
		> https://www.papareact.com/course

	- Tremor 2.0, StepZen, và GraphQL đều được sử dụng để phát triển ứng dụng web và dịch vụ web.

		- Tremor 2.0: Nền tảng xử lý và phân tích luồng dữ liệu thời gian thực.
			> được sử dụng để xử lý và phân tích luồng dữ liệu thời gian thực. Nó có thể được sử dụng để thu thập, xử lý, và phân tích dữ liệu từ nhiều nguồn khác nhau và cho phép các lập trình viên xây dựng các ứng dụng web và dịch vụ web thời gian thực.
			
			- https://www.tremor.so/
				> The React library to build dashboards fast

		- StepZen: Dịch vụ API liên kết các dịch vụ backend khác nhau vào một API đơn nhất thông qua GraphQL.
			> là một dịch vụ API liên kết các dịch vụ backend khác nhau vào một API đơn nhất thông qua GraphQL. Với StepZen, các lập trình viên có thể tạo ra các API đơn giản và hiệu quả bằng cách kết nối các dịch vụ backend khác nhau, giúp tối ưu hóa quá trình phát triển ứng dụng web và dịch vụ web.
			
			- https://stepzen.com/
				> Xây dựng GraphQL dễ dàng
					Tự động tối ưu hóa & thay đổi quy mô GraphQL
					Cách tiếp cận khai báo duy nhất để truy cập dữ liệu có liên kết

		- GraphQL: Ngôn ngữ truy vấn dữ liệu để truy vấn dữ liệu từ các dịch vụ web thông qua một API duy nhất.
			> là một ngôn ngữ truy vấn dữ liệu được sử dụng để truy vấn dữ liệu từ các dịch vụ web thông qua một API duy nhất. Với GraphQL, các lập trình viên có thể tùy chỉnh các truy vấn và chỉ lấy các dữ liệu cần thiết, giúp tối ưu hóa hiệu suất ứng dụng và giảm băng thông mạng cần thiết cho các truy vấn dữ liệu. GraphQL cũng giúp đơn giản hóa việc phát triển ứng dụng web bằng cách cung cấp các công cụ cho phép các lập trình viên dễ dàng tạo và quản lý các API.
			
	- Tailwind CSS, TypeScript, Vercel: 
		- Tailwind CSS: Một framework CSS giúp thiết kế giao diện web dễ dàng hơn bằng các class CSS đã được định nghĩa sẵn.
		- TypeScript: Một ngôn ngữ lập trình phổ biến được phát triển bởi Microsoft, bổ sung các tính năng tĩnh cho JavaScript giúp kiểm soát lỗi và phát triển ứng dụng hiệu quả hơn.
		- Vercel: Một nền tảng hosting cho phép phát triển và triển khai các ứng dụng web, đặc biệt là các ứng dụng Jamstack, một kiểu phát triển web hiện đại.
			
	- https://open-meteo.com/
		> API thời tiết miễn phí
			Open-Meteo là một API thời tiết nguồn mở với quyền truy cập miễn phí cho mục đích sử dụng phi thương mại. Không cần khóa API. Bạn có thể sử dụng nó ngay lập tức!

--------------------------------------------------------------------------
Giải thích CSS:
	"Flex" là một thuật ngữ trong CSS, đại diện cho thuộc tính "display: flex". Thuộc tính này được sử dụng để tạo ra các bố cục linh hoạt và dễ dàng điều chỉnh trong thiết kế giao diện web. Với thuộc tính flex, các phần tử HTML có thể tự động điều chỉnh kích thước và vị trí bên trong một container, tạo ra các bố cục đáp ứng và linh hoạt trên nhiều kích thước màn hình khác nhau.	
	"min-h-screen" là một lớp (class) được định nghĩa sẵn trong framework CSS như Tailwind, có ý nghĩa là thiết lập chiều cao tối thiểu cho phần tử đó bằng chiều cao của màn hình (viewport).
    "flex-col" là thuộc tính để thiết lập cho phần tử đó sử dụng bố cục theo chiều dọc (cột đơn).
    "items-center" là thuộc tính để căn giữa các phần tử con theo chiều ngang.
    "justify-between" là thuộc tính để căn giữa các phần tử con theo chiều dọc và đặt chúng ở hai bên đầu của container.
	"P-24" là một lớp (class) được định nghĩa trong framework CSS như Tailwind, có ý nghĩa thiết lập cho phần tử tạo ra một khoảng cách padding là 24px (pixels) ở cả 4 cạnh (trên, dưới, trái, phải) của phần tử. Các lớp khác như "p-16", "p-32" có ý nghĩa tương tự, nhưng với khoảng cách padding khác nhau tương ứng.
	'min-h-screen' là một lớp (class) CSS, được sử dụng để đặt chiều cao tối thiểu của phần tử là bằng chiều cao của màn hình.
    'bg-gradient-to-br' là một lớp CSS để tạo gradient nền từ trái qua phải và từ trên xuống dưới.
    'from-[#394F68]' và to-[#183B7E] là các lớp CSS để xác định màu sắc của gradient. Trong đó, from-[#394F68] là màu sắc bắt đầu của gradient và to-[#183B7E] là màu sắc kết thúc của gradient. Đây là các giá trị được định nghĩa bằng mã hex cho màu sắc.
    'p-10' là một lớp CSS để đặt giá trị padding là 10px cho phần tử.
    'flex flex-col justify-center items-center' là các lớp CSS để tạo một phần tử với kiểu hiển thị flexbox. 
		- 'flex' cho biết phần tử đó sẽ sử dụng flexbox, 
		- 'flex-col' sẽ xác định phần tử con sẽ được sắp xếp theo hướng dọc (theo chiều dọc), 
		- 'justify-center' để căn giữa phần tử con theo chiều dọc 
		- 'items-center' để căn giữa phần tử con theo chiều ngang.
    'max-w-4xl' là một lớp CSS để đặt giá trị độ rộng tối đa cho phần tử là 4xl.
    'mx-auto' là một lớp CSS để căn giữa phần tử theo chiều ngang.
    'items-center': Lớp này được sử dụng để căn chỉnh các phần tử con theo chiều dọc, đặt chúng vào giữa của phần tử cha.
    'space-x-2': Lớp này được sử dụng để thêm khoảng cách ngang giữa các phần tử con của phần tử cha. Trong trường hợp này, giá trị 2 được sử dụng để thiết lập khoảng cách là 2 đơn vị.
    'text-white/80': Lớp này được sử dụng để thiết lập màu chữ của phần tử thành trắng. Trong trường hợp này, giá trị /80 được sử dụng để thiết lập độ mờ của màu trắng thành 80%.
    'h-5': Lớp này được sử dụng để thiết lập chiều cao của phần tử thành 5 đơn vị.
    'w-5': Lớp này được sử dụng để thiết lập chiều rộng của phần tử thành 5 đơn vị.
	'space-y-4' là một lớp (class) của CSS được sử dụng để thêm khoảng cách dọc giữa các phần tử con của một phần tử cha. Khi áp dụng lớp này vào một phần tử cha, nó sẽ thêm khoảng cách dọc 4 đơn vị giữa các phần tử con của phần tử cha
	
		
	- '@tailwind base;, @tailwind components; và @tailwind utilities;' là các chỉ thị (directives) trong CSS framework Tailwind. Chúng được sử dụng để chèn các kiểu (styles) được định nghĩa trong Tailwind vào trong bộ mã (code) CSS.
		'@tailwind base;' chèn các kiểu (styles) căn bản và cấu hình cơ bản của Tailwind vào trong bộ mã CSS. Ví dụ như định nghĩa kích thước phông chữ mặc định, hiển thị mặc định của các thẻ HTML, v.v.
		'@tailwind components;' chèn các kiểu (styles) của các thành phần giao diện như button, form, modal, tooltip, v.v. được định nghĩa sẵn trong Tailwind vào trong bộ mã CSS.
		'@tailwind utilities;' chèn các kiểu (styles) của các tiện ích được định nghĩa sẵn trong Tailwind vào trong bộ mã CSS. Ví dụ như margin, padding, text color, background color, v.v. Chúng được sử dụng để tùy biến và thiết lập kiểu cho các phần tử giao diện của trang web.

--------------------------------------------------------------------------
Giải thích Extension:		
	- 'Tailwind CSS IntelliSense' là một extension cho các trình soạn thảo mã nguồn như VSCode, Sublime Text, Atom, v.v. để hỗ trợ cho việc sử dụng CSS framework Tailwind. Extension này cung cấp các tính năng sau:
		- Hoàn thành mã tự động (autocompletion) các lớp (class) của Tailwind trong trình soạn thảo mã nguồn. Bạn có thể tìm kiếm và chọn các lớp phù hợp cho phần tử giao diện mà bạn đang thiết kế.
		- Hỗ trợ xem trước (preview) các lớp (class) của Tailwind trong trình soạn thảo mã nguồn. Bạn có thể xem trước kiểu của phần tử giao diện mà bạn đang thiết kế khi di chuột qua các lớp được đề xuất.
		- Cung cấp thông tin đầy đủ về các lớp (class) của Tailwind trong trình soạn thảo mã nguồn. Bạn có thể xem chi tiết các thuộc tính (properties) và giá trị (values) của các lớp, đồng thời cũng có thể xem các lớp tương tự (related classes) và cách sử dụng chúng.
		- Với Tailwind CSS IntelliSense, bạn có thể tăng tốc độ và chính xác trong việc sử dụng CSS framework Tailwind trong các dự án phát triển web.
		
	- 'ES7+ React/Redux/React-Native snippets' là một extension cho các trình soạn thảo mã nguồn như VSCode, Sublime Text, Atom, v.v. để hỗ trợ cho việc phát triển ứng dụng web và mobile với các công nghệ React, Redux và React Native. Extension này cung cấp các tính năng sau:
		- Snippets: Hỗ trợ cho việc nhập nhanh các đoạn mã (code snippets) phổ biến của React, Redux và React Native. Các đoạn mã này đã được tối ưu hóa để giảm thời gian nhập liệu, giúp cho việc phát triển ứng dụng React và React Native trở nên nhanh chóng và tiện lợi hơn.
		- Tính năng autocomplete: Cung cấp autocomplete cho các thuộc tính (properties) của các thành phần (components) trong React và React Native, giúp cho việc nhập liệu nhanh hơn và giảm thiểu lỗi nhập liệu.
		- Tính năng jump to definition: Cho phép người dùng nhảy đến định nghĩa (definition) của các thành phần (components), giúp cho việc tìm kiếm và hiểu rõ các thành phần của ứng dụng dễ dàng hơn.

		Với 'ES7+ React/Redux/React-Native snippets', các nhà phát triển có thể tiết kiệm thời gian và nâng cao hiệu quả làm việc trong việc phát triển ứng dụng web và mobile với các công nghệ React, Redux và React Native.

--------------------------------------------------------------------------
Giải thích NextJS/ReactJS/JS:		
	- 'use client': 
		> Trong Next.js, 'use client' được sử dụng để xác định liệu mã đang được thực thi trên phía máy chủ (server) hay phía khách hàng (client). 'use client' là một hook (khoá) được cung cấp bởi thư viện 'swr' trong Next.js, giúp cho việc đồng bộ dữ liệu giữa phía máy chủ và phía khách hàng được thực hiện một cách hiệu quả.

		> Khi sử dụng 'use client', mã được thực thi trên phía khách hàng sẽ được thực hiện trong môi trường trình duyệt, trong khi mã được thực thi trên phía máy chủ sẽ được thực hiện trong môi trường máy chủ. Việc sử dụng 'use client' giúp cho việc quản lý trạng thái ứng dụng trên phía máy chủ và phía khách hàng trở nên dễ dàng hơn, đồng thời cải thiện hiệu suất và trải nghiệm người dùng.
		
--------------------------------------------------------------------------
* 11:05 Initialising the Build
	>>> npx create-next-app@latest stepzen-weather-app-youtube
		> Lưu ý nếu dùng lệnh "npx create-next-app@canary stepzen-weather-app-youtube", "canary" là một tên mã phiên bản của Next.js được gọi là "canary build". Phiên bản canary là một phiên bản phát triển mới nhất và chưa được kiểm tra kỹ lưỡng, được phát hành trước khi phiên bản chính thức được phát hành để cho phép các nhà phát triển kiểm tra và thử nghiệm các tính năng mới. Các phiên bản canary có thể không ổn định và không nên được sử dụng cho môi trường sản xuất.

		√ Would you like to use TypeScript with this project? ... Yes
		√ Would you like to use ESLint with this project? ... Yes
			> ESLint là một công cụ kiểm tra mã nguồn (linter) cho JavaScript. Nó được sử dụng để tìm và báo cáo các lỗi cú pháp, sai sót lập trình, không tuân thủ các quy tắc code style và các vấn đề khác liên quan đến chất lượng mã nguồn. ESLint cho phép người dùng định nghĩa các quy tắc tùy chỉnh để đảm bảo mã nguồn tuân thủ quy ước code style của dự án hoặc tổ chức. Nó thường được sử dụng trong các dự án phát triển phần mềm để đảm bảo mã nguồn của dự án luôn đạt chất lượng cao và dễ bảo trì.
		√ Would you like to use Tailwind CSS with this project? ... Yes
		√ Would you like to use `src/` directory with this project? ... No
		√ Would you like to use experimental `app/` directory with this project? » Yes
		√ What import alias would you like configured? ... @/*	Yes */
		
	>>> cd stepzen-weather-app-youtube
	
	>>> npm run dev
		> http://localhost:3000		
			
	- Install 'Tailwind CSS IntelliSense' trong VSCode
	- Install 'ES7+ React/Redux/React-Native snippets' trong VSCode
		
	- Update 'stepzen-weather-app-youtube\app\page.tsx'
		- Code [
			...
			<main className="">
			  <h1>Lets build a GPT-4 Weather App</h1>
			</main>
			...
		]
		
	- Update 'stepzen-weather-app-youtube\app\globals.css'
		- Xóa hết css chỉ để lại:
			- Code [
				@tailwind base;
				@tailwind components;
				@tailwind utilities;
			]
			
-----------------------------------
* 18:59 Build Layout & 21:56 Setting Up Tremor 2.0
			
	- Update 'stepzen-weather-app-youtube\app\page.tsx'
		- Code [
			...
			<main className="text-6xl">
			  ...
			</main>
			...
		]

	>>> npm install @tremor/react
		> ref 'https://www.tremor.so/docs/getting-started/installation'
		> Lệnh "npm install @tremor/react" được sử dụng để cài đặt package "@tremor/react" trong một dự án sử dụng công nghệ Node.js và npm. Package "@tremor/react" cung cấp các thành phần React để tạo giao diện người dùng cho Tremor - một nền tảng dữ liệu luồng dữ liệu mã nguồn mở được sử dụng để xử lý dữ liệu lớn và phân tích dữ liệu thời gian thực. Khi đã cài đặt package "@tremor/react", bạn có thể sử dụng các thành phần React của Tremor để tạo giao diện người dùng trong dự án của mình.
			
	- Update 'stepzen-weather-app-youtube\tailwind.config.js'
		- Code [
			...
			content: [
				...
				"./node_modules/@tremor/**/*.{js,ts,jsx,tsx}",
			],
			...
		]
		
	- Update 'stepzen-weather-app-youtube\next.config.js'
		- Code [
			...
			const nextConfig = {
			  experimental: {
				...
				serverComponentsExternalPackages: ['@tremor/react'],
			  },
			}
			...
		]		
		> 'serverComponentsExternalPackages: [@tremor/react]' là một thuộc tính trong tệp cấu hình của Tremor, một hệ thống xử lý luồng sự kiện thời gian thực.
			Thuộc tính này cho phép Tremor sử dụng gói @tremor/react, một gói phụ thuộc bên ngoài được cung cấp bởi Tremor để cung cấp khả năng tương tác với các thành phần React.
			Khi được sử dụng, @tremor/react sẽ cho phép các thành phần Tremor được kết nối với các thành phần React khác để cung cấp tính năng đa dạng và phong phú hơn trong việc xử lý dữ liệu thời gian thực.
		> ref 'https://www.tremor.so/docs/getting-started/installation'
		
	- chạy 'npm run dev' để xem kq lỗi gì ko
			
-----------------------------------
* 24:40 Building the Home Page
	- Update 'stepzen-weather-app-youtube\app\page.tsx'
		- Code [
			'use client'

			import {Card, Divider, Subtitle, Text} from '@tremor/react'

			export default function Home() {
			  return (
				<div className="min-h-screen bg-gradient-to-br from-[#394F68] to-[#183B7E] p-10 flex flex-col justify-center items-center">
				  <Card className='max-w-4xl mx-auto'>
					<Text className='text-6xl font-bold text-center mb-10'>Weather AI</Text>
					<Subtitle className='text-xl text-center'>
					  Powered by OpenAI, Next.js 13.3 Tailwind CSS, Tremor 2.0 + More!
					</Subtitle>

					<Divider className='my-10'/>

					<Card className='bg-gradient-to-br from-[#394F68] to-[#183B7E]'>
					  {/* CityPicker */}
					</Card>
				  </Card>
				</div>
			  )
			}
		]	
			
-----------------------------------
* 30:32 Building the City Picker Component (1/2)	
* 41:35 Implementing Heroicons	
* 42:45 Live Debugging
* 45:04 Building the City Picker Component (2 /2)
	>>> npm i country-state-city
		> Dữ liệu chứa tất cả dữ liệu của các Quốc gia, Bang và Thành phố của họ
		> ref 'https://www.npmjs.com/package/country-state-city'
		
	>>> npm i --save react-select
		> A flexible and beautiful 'Select Input' control for ReactJS with multiselect, autocomplete, async and creatable support.
		> ref 'https://react-select.com/home'
		
	>>> npm i @heroicons/react@1.0.6
		> To use the icons in our Blocks we install Heroicons
		> ref 'https://www.tremor.so/docs/getting-started/installation'
		
	- Create 'stepzen-weather-app-youtube\components\CityPicker.tsx'
		> Gõ 'rfce' để gen code tự động cho function component
		- Code [
			'use client'

			import {Country, City} from 'country-state-city'
			import { useRouter } from 'next/navigation'
			import { useState } from 'react'
			import Select from 'react-select'
			import {GlobeIcon} from '@heroicons/react/solid'

			type option = {
				value: {
					latitude: string;
					longitude: string;
					isoCode: string;
				};
				label: string;
			} | null

			type cityOption = {
				value: {
					latitude: string;
					longitude: string;
					countryCode: string;
					name: string;
					stateCode: string;
				};
				label: string;
			} | null

			const options = Country.getAllCountries().map((country) => ({
				value: {
					latitude: country.latitude,
					longitude: country.longitude,
					isoCode: country.isoCode,
				},
				label: country.name,
			}))

			function CityPicker() {

				const [selectedCountry, setSelectedCountry] = useState<option>(null)
				const [selectedCity, setSelectedCity] = useState<cityOption>(null)
				const router = useRouter()

				const handleSelectedCountry = (option: option) => {
					setSelectedCountry(option)
					setSelectedCity(null)
				}

				const handleSelectedCity = (option: cityOption) => {
					setSelectedCity(option)
					router.push(`location/${option?.value.name}/${option?.value.latitude}/${option?.value.longitude}`)
				}

				return (
					<div className='space-y-4'>
						<div className='space-y-2'>
							<div className='flex items-center space-x-2 text-white/80'>
								<GlobeIcon className='h-5 w-5 text-white' />
								<label htmlFor='country'>Country</label>
							</div>

							<Select
								className='text-black'
								value={selectedCountry}
								onChange={handleSelectedCountry}
								options={options}
							/>
						</div>

						{selectedCountry && (
							<div className='space-y-2'>
								<div className='flex items-center space-x-2 text-white/80'>
									<GlobeIcon className='h-5 w-5 text-white' />
									<label htmlFor='country'>City</label>
								</div>

								<Select
									className='text-black'
									value={selectedCity}
									onChange={handleSelectedCity}
									options={City.getCitiesOfCountry(
										selectedCountry.value.isoCode
									)?.map((state) => ({
										value: {
											latitude: state.latitude!,
											longitude: state.longitude!,
											countryCode: state.countryCode,
											name: state.name,
											stateCode: state.stateCode,
										},
										label: state.name,
									}))}
								/>
							</div>
						)}
					</div>
				)
			}

			export default CityPicker
		]	
		
	- Update 'stepzen-weather-app-youtube\app\page.tsx'
		- Code [
			...
			import CityPicker from '@/components/CityPicker'
			...
			<CityPicker/>
			...
		]	
			
-----------------------------------
* 52:04 Implementing Dynamic Routing in Next.js 13
* 54:04 Creating the Weather Page 
	- Create 'stepzen-weather-app-youtube\app\location\[city]\[lat]\[long]\page.tsx'
		> Gõ 'rfce' để gen code tự động cho function component
		- Code [
			
		]
		